/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * I2C-Generator: 0.3.0
 * Yaml Version: 0.1.0
 * Template Version: 0.7.0-62-g3d691f9
 */
/*
 * Copyright (c) 2021, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef SENSIRIONI2CSGP41_H
#define SENSIRIONI2CSGP41_H

#include <Wire.h>

#include <SensirionCore.h>

class SensirionI2CSgp41 {

  public:
    SensirionI2CSgp41();
    /**
     * begin() - Initializes the SensirionI2CSgp41 class.
     *
     * @param i2cBus Arduino stream object to use for communication.
     *
     */
    void begin(TwoWire& i2cBus);

    /**
      executeConditioning（）-此命令启动调节，
      即通过调用sgp41_measure_raw命令，
      VOC像素将在相同的温度下运行，
      而NOx像素将在不同的温度下进行调节。
      此命令仅返回VOC像素SRAW_VOC的测量原始信号，
      即2个字节（+1个CRC字节）
     *
     * WARNING: 为避免损坏传感材料，调节时间不得超过10秒！
     *
     * @param defaultRh 相对湿度的默认条件。
     *
     * @param defaultT 默认温度条件。
     *
     * @param srawVoc u16无符号整数直接提供与感测元件电阻的对数成比例的原始信号SRAW_VOC。
     *
     * @return 成功时为0，否则为错误代码
     */
    uint16_t executeConditioning(uint16_t defaultRh, uint16_t defaultT,
                                 uint16_t& srawVoc);

  /**
    * measureRawSignals() - 此命令启动/继续VOC+NOx测量模式
    *
    * @param relationHumidity 通过发送默认值 0x8000 (50%RH) 禁用湿度补偿，
    * 或者在发送以刻为单位的相对湿度时启用湿度补偿（刻 = %RH * 65535 / 100）

    * @paramtemperature 通过发送默认值 0x6666 (25 摄氏度) 禁用湿度补偿，
    * 或者在发送以刻为单位的温度时启用湿度补偿（刻 = (摄氏度 + 45) * 65535 / 175）
    *
    * @param srawVoc u16 无符号整数直接以刻为单位提供原始信号 SRAW_VOC，
    * 该信号与传感元件电阻的对数成比例。
    *
    * @param srawNox u16 无符号整数直接以刻为单位提供原始信号 SRAW_NOX，
    * 该信号与传感元件电阻的对数成比例。
    *
    * @return 成功时为0，否则为错误代码
    */
    uint16_t measureRawSignals(uint16_t relativeHumidity, uint16_t temperature,
                               uint16_t& srawVoc, uint16_t& srawNox);

    /**
     * executeSelfTest() - 此命令触发内置自检，检查热板和MOX材料的完整性，
     * 并将此测试的结果作为2个字节返回
     *
     * @param testResult 0xXX 0xYY：忽略最高有效字节0xXX。
     * 最低有效字节0xYY的四个最低有效位提供了每个像素是否通过自检的信息。
     * 全零表示所有测试均已成功通过。有关更多详细信息，请查看数据表。
     *
     * @return 成功时为0，否则为错误代码
     */
    uint16_t executeSelfTest(uint16_t& testResult);

    /**
     * turnHeaterOff() - 此命令关闭热板并停止测量。随后，传感器进入怠速模式。
     *
     * @return 成功时为0，否则为错误代码
     */
    uint16_t turnHeaterOff(void);

    /**
     * getSerialNumber() - 此命令通过返回3x2字节提供SGP41芯片的十进制序列号。
     *
     * @param serialNumber 48位唯一序列号
     *
     * @return 成功时为0，否则为错误代码
     */
    uint16_t getSerialNumber(uint16_t serialNumber[]);

  private:
    TwoWire* _i2cBus = nullptr;
};

#endif /* SENSIRIONI2CSGP41_H */
